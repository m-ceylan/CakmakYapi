
@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}


 
<div class="content animated fadeIn" id="app"> 
    <div class="card">
        <div class="card-header header-elements-inline">
            <h5 class="card-title">Hakkımızda</h5>
            <div class="header-elements" v-if="isEditForm">
                <div class="list-icons">
                    <button class="btn btn-outline-info  btn-sm"
                            @@click="isEditForm=false;updateID=''"
                            title="Listeye Dön">
                        <i class="icon-arrow-left8"></i>
                        Listeye Dön
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body d-flex justify-content-between " v-if="!isEditForm">
            <div>
                <template>

                    <el-input clearable placeholder="ÖRN: Hakkımızda" style="width:200px" size="small" v-model="filter.SearchTerm"></el-input>


                    <el-button size="mini"
                               plain
                               type="info"
                               @@click="getData();">
                        <i class="icon-search4 mr-2 "></i>
                        Detaylı Ara
                    </el-button>


                    <el-button v-if="filter.SearchTerm.length>0"
                               size="mini"
                               plain
                               type="danger"
                               @@click="filter.SearchTerm='';getData();">
                        <i class="icon-close2 mr-2 "></i>
                        Filtreyi Temizle
                    </el-button>
                </template>
            </div>
            <div>
                <template v-if="!isEditForm">
                    <el-button 
                               v-if="aboutIDs.length>0" size="mini"
                               plain
                               type="danger"
                               @@click="bulkDetelete()">
                        <i class="icon-trash mr-2 "></i>
                        Seçilileri Sil
                    </el-button>


                    <button class="btn btn-outline-info  btn-sm"
                            v-if="!isEditForm"
                            @@click="isEditForm=true"
                            title="Ekle">
                        <i class="icon-plus-circle2 mr-2 "></i>
                        Ekle
                    </button>



                </template>
            </div>

        </div>

        @* Table Template Start *@
        <template v-if="!isEditForm">
            <div class="table-responsive">
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th class="width-50"> <el-checkbox :indeterminate="isIndeterminate" v-model="checkAll" @@change="handleCheckAllChange"></el-checkbox></th>
                            <th>Başlık</th>
                            <th>Fotoğraf</th>
                            <th class="width-50 text-center">Aktif</th>
                            <th style="width:200px; text-align:center;">İşlemler</th>

                        </tr>
                    </thead>
                    <tbody>

                        <tr v-for="item in items.filter(data => !filter.SearchTerm || data.title.toLowerCase().includes(filter.SearchTerm.toLowerCase()))" :key="item.id">

                            <td>
                                <el-checkbox :label="item.id" v-model="aboutIDs" :key="item.id"><span></span></el-checkbox>
                            </td>
                            <td>{{item.title}}</td>
                            <td>
                                <label>Test</label>
                                @*<div class="demo-image">
                                    <div class="block" >
                                        <el-image style="width: 100px; height: 100px"
                                                  :src="url"
                                                 ></el-image>
                                    </div>
                                </div>*@

                            </td>
                            <td class="text-center">
                                
                                <i @@click="changeIsActive(item);item.isActive=!item.isActive" v-if="item.isActive" class="icon-checkbox-checked cursor-pointer text-info"></i>
                                <i @@click="changeIsActive(item);item.isActive=!item.isActive" v-else class="icon-checkbox-unchecked2 cursor-pointer text-info"></i>

                            </td>

                            <td class="text-center">
                                <button class="btn btn-outline-info  btn-sm" @@click="handleEdit(item)" title="Güncelle"><i class="icon-database-edit2"></i></button>
                                <button class="btn btn-outline-danger btn-sm" @@click="confirmDelete(item)" title="Sil"><i class="icon-trash"></i></button>
                            </td>
                        </tr>

                    </tbody>
                </table>
                <div class="row">
                    <div class="col-md-12 pagination mt-3 mb-3" style="display: flex; justify-content: center;">
                        <el-pagination background style="text-align:center;"
                                       layout="prev, pager, next"
                                       :total="filter.TotalCount"
                                       :page-size="filter.Take"
                                       :current-page.sync="filter.CurrentPage"
                                       @@current-change="currentPageChanged"
                                       :hide-on-single-page="true">
                        </el-pagination>


                    </div>
                </div>
            </div>
        </template>
        @* Table Template End *@

        @* Edit Template Start *@
        <template v-else>
            <div class="row">
                <div class="col-md-12">
                    <div class="card-body">
                        <input autocomplete="false" name="hidden" type="text" style="display:none;">
                        <div class="row">
                            <div class="form-group col-md-12">
                                <label> Başlık </label>
                                <el-input v-model="request.title"></el-input>

                                <span class="validation-error" v-if="response.validationErrors.some(x => x.key == 'Title')">{{ response.validationErrors.filter(x => x.key == 'Title')[0].value }}</span>
                            </div>
                        </div>
                        <div class="text-right mt-3">
                            <button v-if="updateID.replace(/\s/g, '').length > 0" type="submit" class="btn btn-outline-info " @@click="updateItem">
                                <i class="icon-database-edit2 mr-2"></i>
                                Güncelle

                            </button>

                            <button type="submit" v-else class="btn btn-outline-info " @@click="addItem">
                                <i class="icon-plus-circle2 mr-2"></i>
                                Ekle

                            </button>
                        </div>
                    </div>

                </div>
            </div>
        </template>
        @* Edit Template End *@
    </div>
</div>

@section Scripts{

    <script>

        var app = new Vue({
            el: '#app',
            data: {
                url: 'https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg',
                items: [],
                search: '',
                updateID: '',
                isEditForm: false,
                aboutIDs: [],
                isIndeterminate: true,
                checkAll: false,
                request: {
                    id: null,
                    title: ''
                },
                filter: {
                    Skip: 0,
                    Take: 10,
                    Page: 1,
                    TotalCount: 0,
                    CurrentPage: 1,
                    SearchTerm:''
                },
                response: {
                    validationErrors: [],
                    Data: null
                },
                lock: true,
                search:''
            },
            methods: {
                //Data Operations Start
                getData: async function () {
                    var res = (await this.$service.post('aboutM/getAbouts', {
                        ... this.filter,
                        Skip: (this.filter.CurrentPage * this.filter.Take) - this.filter.Take
                    }));

                    this.items = res.data.data.items;
                    this.filter.TotalCount = res.data.data.totalCount;
                },
                addItem: async function () {
                    this.response = (await this.$service.post('aboutM/addAbout', this.request)).data;
                    if (!this.response.hasError) {
                        this.$message.success(this.response.message);
                        this.updateID = '';
                        this.isEditForm = false;
                        this.request.id = this.response.data.id;
                        this.items.unshift(this.request);
                        this.request = {
                            id: null,
                            title: ''
                        };

                    } else {
                        this.$message.error(this.response.message);
                    }

                },
                updateItem: async function () {
                    this.response = (await this.$service.post('aboutM/updateAbout', this.request)).data;
                    if (!this.response.hasError) {
                        this.$message.success(this.response.message);
                    } else {
                        this.$message.error(this.response.message);
                    }

                },
                confirmDelete(item) {
                    this.$confirm('Bu kaydı silmek istediğine emin misin?', 'Uyarı', {
                        confirmButtonText: 'Evet',
                        cancelButtonText: 'Vazgeç',
                        type: 'warning'
                    }).then(async () => {
                        this.response = (await this.$service.post('aboutM/deleteAbout', item)).data;
                        if (!this.response.hasError) {
                            this.$message.success(this.response.message);
                            this.getData();
                        } else {
                            this.$message.error(this.response.message);
                        }


                    }).catch(() => {
                        this.$message({
                            type: 'info',
                            message: 'Vazgeçildi'
                        });
                    });
                },
                bulkDetelete: async function () {

                    this.$confirm('Seçili kayıtları silmek istediğine emin misin?', 'Uyarı', {
                        confirmButtonText: 'Evet',
                        cancelButtonText: 'Vazgeç',
                        type: 'warning'
                    }).then(async () => {
                        var request = {
                            SelectedIDs: this.aboutIDs
                        };

                        this.response = (await this.$service.post('aboutM/bulkDeleteAbout', request)).data;
                        if (!this.response.hasError) {
                            this.$message.success(this.response.message);
                            this.aboutIDs = [];
                            this.getData();
                        } else {
                            this.$message.error(this.response.message);
                        }

                    }).catch(() => {
                        this.$message({
                            type: 'info',
                            message: 'Vazgeçildi'
                        });
                    });





                },
                changeIsActive: async function (item) {
                    debugger;
                   
                        var request = {
                            Id: item.id,
                            IsActive: !item.isActive
                        };

                        this.response = (await this.$service.post('aboutM/updateActiveAbout', request)).data;
                        if (!this.response.hasError) {
                            this.$message.success(this.response.message);
                        } else {
                            this.$message.error(this.response.message);
                        }
                },

                //Data Operations End
                handleCheckAllChange(val) {

                    this.aboutIDs = val ? this.items.map(k => k.id) : [];
                    this.isIndeterminate = false;
                },

                handleEdit(row) {
                    this.updateID = row.id;
                    this.request = row;
                    this.isEditForm = true;
                },
                handleDelete(index, row) {
                    this.confirmDelete();
                },

                currentPageChanged() {
                    //window.scrollToTop();
                },


            },

            async beforeMount() {
                this.getData();
                
            },
            mounted() {
                setTimeout(() => {
                    this.lock = false;
                }, 2000)
            },
            watch: {
                'filter.Page': {
                    handler: function () {
                            this.getData();
                    }
                },
                'filter.CurrentPage': {
                    handler: function () {
                            this.getData();
                    }
                },
                'aboutIDs': function () {
                    let checkedCount = this.aboutIDs.length;
                    this.checkAll = checkedCount === this.items.length;
                    this.isIndeterminate = checkedCount > 0 && checkedCount < this.items.length;
                },

            },
            computed: {

            }
        });



    </script>


} 